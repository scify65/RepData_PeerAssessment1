getwd()
setwd("H:/My Documents")
getwd
getwd()
create.dir("USSC")
dir.create("USSC")
ls
ls()
list.dir
list.dir()
list.dirs()
list.dirs(recursive=FALSE)
install.packages("hmisc")
install.packages("Hmisc")
?read.SSD
?read.ssd
?unz
?readlines
?readLines
readLines("H:/My Documents/USSC/opafy14nid.sas7bdat",n=5)
?read.ssd
??read.ssd
?download.file
temp<-tempfile()
unlink(temp)
download.file("http://www.ussc.gov/sites/default/files/zip/opafy14nid.zip","H:/My Documents/USSC/delim")
readLines(unz("H:/My Documents/USSC/delim/opafy14nid.zip","opafy14.dat"),n=5)
readLines(unz("H:/My Documents/USSC/delims/opafy14nid.zip","opafy14.dat"),n=5)
readLines(unz("H:/My Documents/USSC/delims/opafy14nid.zip","opafy14nid.dat"),n=5)
readLines(unz("H:/My Documents/USSC/delims/opafy14nid.zip","opafy14nid.dat"),n=1)
opafy14<-read.ssd("H:/My Documents/USSC/","opafy14nid",sascmd="H:\My Documents\SASFoundation\9.2(32-bit)\sas.exe")
opafy14<-read.ssd("H:/My Documents/USSC/","opafy14nid",sascmd="H:/My Documents/SASFoundation/9.2(32-bit)/sas.exe")
install.packages("foreign")
library(foreign)
source('H:/Downloads/Chrome/Guidelines.R')
sas<-"H:/My Documents/SASFoundation/9.2(32-bit)/sas.exe"
opafy14<-read.ssd("H:/My Documents/USSC/","opafy14nid",sascmd=sas)
sas<-"H:/My Documents/SASFoundation/9.2(32-bit)/sas.exe"
opafy14<-read.ssd("H:/My Documents/USSC","opafy14nid",sascmd=sas)
sas<-"H:/My Documents/SASFoundation/9.2(32-bit)/sas.exe"
opafy14<-read.ssd("H:/My Documents/USSC","opafy14nid",sascmd=sas)
sas<-"H:/My Documents/SASFoundation/9.2(32-bit)/sas.exe"
opafy14<-read.ssd("H:/My Documents/USSC","opafy14nid",sascmd=sas)
require(dplyr)
require(foreign)
sas<-"H:/My Documents/SASFoundation/9.2(32-bit)/sas.exe"
opafy14<-read.ssd("H:/My Documents/USSC","opafy14nid",sascmd=sas)
source('H:/Downloads/Chrome/Guidelines.R')
?read.xport
unlink(opafy14)
showConnections()
source('H:/Downloads/Chrome/Guidelines.R')
source('H:/Downloads/Chrome/Guidelines.R')
library(hmisc)
library(Hmisc)
sas.get("H:/My Documents/USSC", "opafy14nid")
?sas.get
test<-sas.get("H:\My Documents\SASFoundation\9.2(32-bit)\nls\zt\sashelp", "class")
test<-sas.get("H:/My Documents/SASFoundation/9.2(32-bit)/nls/zt/sashelp", "class")
sas<-"H:\My Documents\SASFoundation\9.2(32-bit)\sas.exe"
sas<-"H:/My Documents/SASFoundation/9.2(32-bit)/sas.exe"
test<-sas.get("H:/My Documents/SASFoundation/9.2(32-bit)/nls/zt/sashelp", "class",sasprog=sas)
?make.names
source('H:/Downloads/Chrome/Guidelines.R')
source('H:/Downloads/Chrome/Guidelines.R')
trim<-trim%>%filter(SOURCES==1)%>%mutate(GDLINR=substr(GDLINEHI,1,2))
gdlines<-ggplot(trim, aes(XFOLSOR,XCRHISSR,color=GDLINEHI))+geom_point(alpha=1/3)+
facet_wrap(~GDLINR,nrow=4,ncol=6)+labs(x="Final Offense Level")+
labs(y="Criminal History Category")+
labs(title="Sentencing Table by Chapter 2 Guideline")
print(gdlines)
require(ggplot2)
gdlines<-ggplot(trim, aes(XFOLSOR,XCRHISSR,color=GDLINEHI))+geom_point(alpha=1/3)+
facet_wrap(~GDLINR,nrow=4,ncol=6)+labs(x="Final Offense Level")+
labs(y="Criminal History Category")+
labs(title="Sentencing Table by Chapter 2 Guideline")
print(gdlines)
table(trim$GDLINR,trim$GDLINeHI)
table(trim$GDLINR,trim$GDLINEHI)
table(trim$xcrhissr)
table(trim$XCRHISSR)
table(trim$XFOLSOR)
if (trim$XFOLSOR>43) {trim$XFOLSOR<-43}
?sapply
cap<-if (trim$XFOLSOR>43) {trim$XFOLSOR<-43}
lapply(trim,function(v) {
if (v>43) return(v=43)
else return(v)
})
table(trim$XFOLSOR)
trim$xfolsor<-lapply(trim$xfolsor,function(v) {
if (v>43) return(v=43)
else return(v)
})
trim$xfolsor<-sapply(trim$xfolsor,function(v) {
if (v>43) return(v=43)
else return(v)
})
trim$XFOLSOR<=43
if (trim$XFOLSOR>43) {trim$XFOLSOR<-43}
cap<-trim$XFOLSOR>43
trim$XFOLSOR<-sapply(trim$XFOLSOR,if(trim$XFOLSOR>43){43})
for(i in trim$XFOLSOR){
if (i>43) {i=43}
}
if (trim$XFOLSOR[cap]) {trim$XFOLSOR=43}
if (trim$XFOLSOR[cap]) {trim$XFOLSOR<-43}
for (i in trim$XFOLSOR){if (i>43){print(i)}}
table(trim$xfolsor)
table(trim$XFOLSRO)
table(trim$XFOLSOR)
x[cap]
trim$XFOLSOR[cap]
trim$XFOLSOR
table(is.na(trim$XFOLSOR))
?filter
trim$XFOLSOR[cap]<-43
table(trim$XFOLSOR)
?%>%
?complete.cases
trim<-complete.cases(trim)
trim<-opafy00[varlist]
trim<-trim%>%filter(SOURCES==1)%>%mutate(GDLINR=substr(GDLINEHI,1,2))
trim<-trim[complete.cases(trim)]
trim<-trim[complete.cases(trim),]
cap<-trim$XFOLSOR>43
trim$XFOLSOR[cap]<-43
gdlines<-ggplot(trim, aes(XFOLSOR,XCRHISSR,color=GDLINEHI))+geom_point(alpha=1/3)+
facet_wrap(~GDLINR,nrow=4,ncol=6)+labs(x="Final Offense Level")+
labs(y="Criminal History Category")+
labs(title="Sentencing Table by Chapter 2 Guideline")
print(gdlines)
table(trim$GDLINEHI,trim$GDLINR)
table(trim$GDLINEHI)
?labs
?factor
table(trim$NEWRACE)
test<-factor(trim$NEWRACE,levels=c(1,2,3,6),labels=c("White","Black","Hispanic","Other"))
table(test)
trim$NEWRACE<-factor(trim$NEWRACE,levels=c(1,2,3,6),
labels=c("White","Black","Hispanic","Other"))
table(trim$NEWRACE)
races<-ggplot(trim, aes(XFOLSOR,XCRHISSR,color=NEWRACE))+geom_point(alpha=1/3)+
facet_wrap(~GDLINR,nrow=4,ncol=6)+labs(x="Final Offense Level")+
labs(y="Criminal History Category")+
labs(title="Sentencing Table by Chapter 2 Guideline and Race")
print(races)
fraud<-filter(trim,gdlinehi="2B1.1")
fraud<-filter(trim,gdlinehi=="2B1.1")
fraud<-filter(trim,GDLINEHI=="2B1.1")
ggplot(fraud,aes(XFOLSOR,XCRHISSR,color=NEWRACE))+geom_point(alpha=1/3)
ggplot(fraud,aes(XFOLSOR,XCRHISSR,color=NEWRACE))+geom_point(alpha=.75)
varlist<-c("GDLINEHI","SOURCES","XCRHISSR","XFOLSOR","NEWRACE","AGE","SENSPLT0")
trim<-opafy00[varlist]
trim<-trim%>%filter(SOURCES==1)%>%mutate(GDLINR=substr(GDLINEHI,1,2))
trim<-trim[complete.cases(trim),]
#Cap the XFOLSOR values at 43
cap<-trim$XFOLSOR>43
trim$XFOLSOR[cap]<-43
#Convert NEWRACE to a factor
trim$NEWRACE<-factor(trim$NEWRACE,levels=c(1,2,3,6),
labels=c("White","Black","Hispanic","Other"))
fraud<-filter(trim,GDLINEHI="2B1.1")
fraud<-filter(trim,GDLINEHI=="2B1.1")
ggplot(fraud,aes(XFOLSOR,SENSPLT0,color=NEWRACE))+geom_point(alpha=.75)
?join
?rbind
source('H:/Downloads/Chrome/Guidelines.R')
?grep
grep("sens",names(opafy03),ignore.case=TRUE)
names(opafy03)[11]
names(opafy03)[12]
?toupper
names(opafy03)<-toupper(names(opafy03))
opafy03<-opafy03[varlist]
opafy03$YEAR<-2003
#Read and reduce the 2004 dataset
opafy04<-read.csv("H:/My Documents/USSC/opafy04nid.csv")
opafy04<-opafy04[varlist]
opafy04$YEAR<-2004
#Read and reduce the 2005 dataset
opafy05<-read.csv("H:/My Documents/USSC/opafy05nid.csv")
opafy05<-opafy05[varlist]
opafy05$YEAR<-2005
#Read and reduce the 2006 dataset
opafy06<-read.csv("H:/My Documents/USSC/opafy06nid.csv")
opafy06<-opafy06[varlist]
opafy06$YEAR<-2006
trim<-rbind(opafy00,opafy01,opafy02,opafy03,opafy04,opafy05,opafy06)
trim<-trim%>%filter(SOURCES==1)%>%mutate(GDLINR=substr(GDLINEHI,1,2))
trim<-trim[complete.cases(trim),]
#Cap the XFOLSOR values at 43
cap<-trim$XFOLSOR>43
trim$XFOLSOR[cap]<-43
#Convert NEWRACE to a factor
trim$NEWRACE<-factor(trim$NEWRACE,levels=c(1,2,3,6),
labels=c("White","Black","Hispanic","Other"))
#Build the GDLINEHI plot
gdlines<-ggplot(trim, aes(XFOLSOR,XCRHISSR,color=GDLINEHI))+geom_point(alpha=1/3)+
facet_wrap(~GDLINR,nrow=4,ncol=6)+labs(x="Final Offense Level")+
labs(y="Criminal History Category")+
labs(title="Sentencing Table by Chapter 2 Guideline")
print(gdlines)
#Build the RACES plot
races<-ggplot(trim, aes(XFOLSOR,XCRHISSR,color=NEWRACE))+geom_point(alpha=1/3)+
facet_wrap(~GDLINR,nrow=4,ncol=6)+labs(x="Final Offense Level")+
labs(y="Criminal History Category")+
labs(title="Sentencing Table by Chapter 2 Guideline and Race")
print(races)
#Build the fraud plot
fraud<-filter(trim,GDLINEHI=="2B1.1")
frplot<-ggplot(fraud, aes(SENSPLT0,XFOLSOR,color=NEWRACE))+geom_point(alpha=1/3)+
facet_wrap(~year,ncol=3)+
labs(x="Final Offense Level")+labs(y="Sentence in Months")+
labs(title="Sentence by Race and Final Offense Level for Fraud Offenders")
#Read and reduce the 2004 dataset
opafy04<-read.csv("H:/My Documents/USSC/opafy04nid.csv",nrows=75000)
opafy04<-opafy04[varlist]
opafy04$YEAR<-2004
grep("sens",names(opafy05),ignore.case=TRUE)
opafy05[11]
names(opafy05)[11]
names(opafy04)<-toupper(names(opafy04))
opafy04<-opafy04[varlist]
opafy04$YEAR<-2004
names(opafy05)<-toupper(names(opafy05))
opafy05<-opafy05[varlist]
opafy05$YEAR<-2005
trim<-rbind(opafy00,opafy01,opafy02,opafy03,opafy04,opafy05,opafy06)
trim<-trim%>%filter(SOURCES==1)%>%mutate(GDLINR=substr(GDLINEHI,1,2))
trim<-trim[complete.cases(trim),]
names(trim)
#Cap the XFOLSOR values at 43
cap<-trim$XFOLSOR>43
trim$XFOLSOR[cap]<-43
#Convert NEWRACE to a factor
trim$NEWRACE<-factor(trim$NEWRACE,levels=c(1,2,3,6),
labels=c("White","Black","Hispanic","Other"))
#Build the GDLINEHI plot
gdlines<-ggplot(trim, aes(XFOLSOR,XCRHISSR,color=GDLINEHI))+geom_point(alpha=1/3)+
facet_wrap(~GDLINR,nrow=4,ncol=6)+labs(x="Final Offense Level")+
labs(y="Criminal History Category")+
labs(title="Sentencing Table by Chapter 2 Guideline")
print(gdlines)
#Build the RACES plot
races<-ggplot(trim, aes(XFOLSOR,XCRHISSR,color=NEWRACE))+geom_point(alpha=1/3)+
facet_wrap(~GDLINR,nrow=4,ncol=6)+labs(x="Final Offense Level")+
labs(y="Criminal History Category")+
labs(title="Sentencing Table by Chapter 2 Guideline and Race")
print(races)
#Build the fraud plot
fraud<-filter(trim,GDLINEHI=="2B1.1")
frplot<-ggplot(fraud, aes(SENSPLT0,XFOLSOR,color=NEWRACE))+geom_point(alpha=1/3)+
facet_wrap(~year,ncol=3)+
labs(x="Final Offense Level")+labs(y="Sentence in Months")+
labs(title="Sentence by Race and Final Offense Level for Fraud Offenders")
print(frplot)
names(frplot)
names(fraud)
frplot<-ggplot(fraud, aes(SENSPLT0,XFOLSOR,color=NEWRACE))+geom_point(alpha=1/3)+
facet_wrap(.~YEAR,ncol=4,nrow=2)+
labs(x="Final Offense Level")+labs(y="Sentence in Months")+
labs(title="Sentence by Race and Final Offense Level for Fraud Offenders")
print(frplot)
frplot<-ggplot(fraud, aes(SENSPLT0,XFOLSOR,color=NEWRACE))+geom_point(alpha=1/3)+
facet_wrap(~YEAR,ncol=4)+
labs(x="Final Offense Level")+labs(y="Sentence in Months")+
labs(title="Sentence by Race and Final Offense Level for Fraud Offenders")
print(frplot)
frplot<-ggplot(fraud, aes(XFOLSOR,SENSPLT0,color=NEWRACE))+geom_point()+
facet_wrap(~YEAR,ncol=4)+
labs(x="Final Offense Level")+labs(y="Sentence in Months")+
labs(title="Sentence by Race and Final Offense Level for Fraud Offenders")
print(frplot)
ggsave(file="./USSC/fraud.png")
?geom_smooth
frplot<-ggplot(fraud, aes(XFOLSOR,SENSPLT0,color=NEWRACE))+geom_point()+
facet_wrap(~YEAR,ncol=4)+geom_smooth(lm)+
labs(x="Final Offense Level")+labs(y="Sentence in Months")+
labs(title="Sentence by Race and Final Offense Level for Fraud Offenders")
print(frplot)
frplot<-ggplot(fraud, aes(XFOLSOR,SENSPLT0,color=NEWRACE))+geom_point()+
facet_wrap(~YEAR,ncol=4)+geom_smooth(method=lm)+
labs(x="Final Offense Level")+labs(y="Sentence in Months")+
labs(title="Sentence by Race and Final Offense Level for Fraud Offenders")
print(frplot)
frplot<-ggplot(fraud, aes(XFOLSOR,SENSPLT0,color=NEWRACE))+geom_point(shape=1)+
facet_wrap(~YEAR,ncol=4)+geom_smooth(method=lm)+
labs(x="Final Offense Level")+labs(y="Sentence in Months")+
labs(title="Sentence by Race and Final Offense Level for Fraud Offenders")
print(frplot)
ggsave(file="./USSC/fraud2.png")
plot(q)
source('~/dice.R')
rolls<-c(2,4,4,5,rep(6,6),rep(7,8),rep(8,9),rep(9,5),rep(10,4),11,11,11,12)
hist(rolls,breaks=12)
rolls2<-c(2,3,3,4,4,4,rep(5,4),rep(6,5),rep(7,6),rep(8,5),rep(9,4),rep(10,3),11,11,12)
hist(rolls2,breaks=12)
rolls
print(q+scale_x_continuous(breaks=11))
print(q+scale_x_continuous(breaks=2:12))
q<-ggplot(oldrolls,aes(Roll,Freq))+geom_bar(stat="identity")+
scale_x_continuous(breaks=2:12)+scale_y_continuous(breaks=0:10)
print(q)
print(q+stat_function(fun=sin))
print(q+stat_smooth())
print(q+stat_smooth(se=false))
print(q+stat_smooth(se=FALSE))
source('~/dice.R')
ggsave(rolls3,"ThreadRolls.png",dpi=100)
source('~/dice.R')
class(rolls3)
class(rolls4)
rolls4<-ggplot(exprolls,aes(Roll,Freq))+geom_bar(stat="identity")+
scale_x_continuous(breaks=2:12)+scale_y_continuous(breaks=0:10)+
labs(title="Expected Rolls")+stat_smooth(se=FALSE)
print(rolls4)
ggsave(rolls4,"ExpectedRolls.png",dpi=100)
rolls3<-ggplot(oldrolls,aes(Roll,Freq))+geom_bar(stat="identity")+
scale_x_continuous(breaks=2:12)+scale_y_continuous(breaks=0:10)+
labs(title="Rolls in the Thread")+stat_smooth(se=FALSE)
#print(rolls3)
ggsave(rolls3,"ThreadRolls.png",dpi=100)
rolls3<-ggplot(oldrolls,aes(Roll,Freq))+geom_bar(stat="identity")+
scale_x_continuous(breaks=2:12)+scale_y_continuous(breaks=0:10)+
labs(title="Rolls in the Thread")+stat_smooth(se=FALSE)
#print(rolls3)
ggsave(rolls3,"ThreadRolls.png")
rolls3<-ggplot(oldrolls,aes(Roll,Freq))+geom_bar(stat="identity")+
scale_x_continuous(breaks=2:12)+scale_y_continuous(breaks=0:10)+
labs(title="Rolls in the Thread")+stat_smooth(se=FALSE)
#print(rolls3)
ggsave(rolls3,file="ThreadRolls.png")
rolls3<-ggplot(oldrolls,aes(Roll,Freq))+geom_bar(stat="identity")+
scale_x_continuous(breaks=2:12)+scale_y_continuous(breaks=0:10)+
labs(title="Rolls in the Thread")+stat_smooth(se=FALSE)
#print(rolls3)
ggsave(rolls3,file="ThreadRolls.png",dpi=100)
source('~/dice.R')
update.packages()
library(installr)
updateR()
rownames(installed.packages())
rownames(installed.packages())
sprintf('install.packages(%s)', paste(shQuote(rownames(installed.packages())),collapse=','))
rownames(installed.packages())
update.packages()
y
y
library(scales)
setwd("RepData_PeerAssessment1")
data<-read.csv(unz("activity.zip","activity.csv"),colClasses=c("numeric","character","numeric"))
data$date<-as.Date(data$date, "%Y-%m-%d")
activity<-data%>%group_by(interval)%>%summarize(average_steps=mean(steps,na.rm=TRUE))
activity$interval<-as.POSIXct(strptime(formatC(activity$interval,width=4,flag=0),
format="%H%M"))
require(dplyr)
require(ggplot2)
activity<-data%>%group_by(interval)%>%summarize(average_steps=mean(steps,na.rm=TRUE))
activity$interval<-as.POSIXct(strptime(formatC(activity$interval,width=4,flag=0),
format="%H%M"))
activ.plot<-ggplot(activity,aes(interval,average_steps))+geom_line()+
labs(main="Average Steps per Time Interval")+xlab("Interval")+
ylab("Step Average")+scale_x_datetime("",labels=date_format("%H:%M"))
print(activ.plot)
activ.plot<-ggplot(activity,aes(interval,average_steps))+geom_line()+
labs(main="Average Steps per Time Interval")+xlab("Interval")+
ylab("Step Average")+scale_x_datetime("",labels=date_format("%H:%M"),breaks="1 hour")
print(activ.plot)
activ.plot<-ggplot(activity,aes(interval,average_steps))+geom_line()+
labs(main="Average Steps per Time Interval")+xlab("Interval")+
ylab("Step Average")+scale_x_datetime("",labels=date_format("%H:%M"),breaks="2 hours")
print(activ.plot)
source('~/Reproducible Research/Peer1.R')
source('~/Reproducible Research/Peer1.R')
source('~/Reproducible Research/Peer1.R')
activ.plot<-ggplot(activity,aes(interval,average_steps))+geom_line()+
labs(main="Average Steps per Time Interval")+xlab("Interval")+
ylab("Step Average")+scale_x_datetime("",labels=date_format("%H:%M"),
breaks="2 hours")
print(activ.plot)
day.plot<-ggplot(day,aes(interval,average_steps))+geom_line()+
labs(main="Average Steps per Time Interval")+xlab("Interval")+
ylab("Step Average")+facet_grid(weekday~.)+scale_x_datetime("",
labels=date_format("%H:%M"), breaks="2 hours")
print(day.plot)
day$interval<-as.POSIXct(strptime(formatC(day$interval,width=4,flag=0),
format="%H%M"))
day.plot<-ggplot(day,aes(interval,average_steps))+geom_line()+
labs(main="Average Steps per Time Interval")+xlab("Interval")+
ylab("Step Average")+facet_grid(weekday~.)+scale_x_datetime("",
labels=date_format("%H:%M"), breaks="2 hours")
print(day.plot)
day<-missing%>%group_by(weekday,interval)%>%
summarize(average_steps=mean(steps,na.rm=TRUE))
day$interval<-as.POSIXct(strptime(formatC(day$interval,width=4,flag=0),
format="%H%M"))
day.plot<-ggplot(day,aes(interval,average_steps))+geom_line()+
labs(main="Average Steps per Time Interval")+xlab("Interval")+
ylab("Step Average")+facet_grid(weekday~.)+scale_x_datetime("",
labels=date_format("%H:%M"), breaks="2 hours")
print(day.plot)
missing$weekday<-factor((weekdays(data$date) %in% weekend),levels=c("FALSE","TRUE"),
labels=c("Weekday","Weekend"))
day<-missing%>%group_by(weekday,interval)%>%
summarize(average_steps=mean(steps,na.rm=TRUE))
day$interval<-as.POSIXct(strptime(formatC(day$interval,width=4,flag=0),
format="%H%M"))
day.plot<-ggplot(day,aes(interval,average_steps))+geom_line()+
labs(main="Average Steps per Time Interval")+xlab("Interval")+
ylab("Step Average")+facet_grid(weekday~.)+scale_x_datetime("",
labels=date_format("%H:%M"), breaks="2 hours")
print(day.plot)
table(missing$interval~missing$steps)
?table
table(missing$interval,missing$steps)
head(data)
head(missing)
head(activity)
